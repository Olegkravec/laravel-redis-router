<?php


namespace OlegKravets\LaravelRedisService\Mutators;


use Illuminate\Database\Query\Builder;
use Illuminate\Support\Collection;
use OlegKravets\LaravelRedisService\ServiceHandlers\OutboundStream;

class QueryBuilderMutator extends Builder
{
    public $_service_channel = "default:*";

    /**
     * @var OutboundStream
     */
    public $service_connection = null;

    private $is_nested_req = false;
    private $nested_req = [];

    /**
     *
     * This method overrides default Models 'get' method and retrieves data directly from redis service
     *  <b>UNFORTUNATELY</b> this implementation does not allow you to make multiple wheres causes.
     *
     * @param string[] $columns
     * @return Collection
     * @throws \RedisClient\Exception\InvalidArgumentException
     */
    public function get($columns = ['*'])
    {
        if(empty($this->wheres)){
            $this->nested_req = [['id','!=',-0xffff]]; //
        }


        return new Collection(json_decode($this->service_connection->sync_request(
            $this->_service_channel,
            'where',
            (!empty($this->nested_req)) ?
                json_encode($this->nested_req) :
                "{$this->wheres[0]['column']}||{$this->wheres[0]['value']}"
        ), true, 512, JSON_THROW_ON_ERROR));
    }

    /**
     * @param array|\Closure|string $column
     * @param null $operator
     * @param null $value
     * @param string $boolean
     * @return $this|QueryBuilderMutator
     */
    public function where($column, $operator = null, $value = null, $boolean = 'and')
    {
        if(is_array($column)){
            $this->nested_req = $column;
        }else{
            $this->wheres[0]['column'] = $column;
            if(empty($value))
                $this->wheres[0]['value'] = $operator;
            else
                $this->wheres[0]['value'] = $value;
        }
        return $this; // TODO: Change the autogenerated stub
    }

    /**
     * @param array $model
     * @return Collection
     * @throws \JsonException
     * @throws \RedisClient\Exception\InvalidArgumentException
     */
    public function create(array $model = []){
        return new Collection(json_decode($this->service_connection->sync_request(
            $this->_service_channel,
            'create',
            ''.json_encode($model)
        ), true, 512, JSON_THROW_ON_ERROR));
    }

    /**
     * @param array $model
     * @return Collection
     * @throws \JsonException
     * @throws \RedisClient\Exception\InvalidArgumentException
     */
    public function update(array $model = []){
        return new Collection(json_decode($this->service_connection->sync_request(
            $this->_service_channel,
            'update',
            ''.json_encode($model)
        ), true, 512, JSON_THROW_ON_ERROR));
    }
}
